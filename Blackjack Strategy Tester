Overview:
Program will apply gambling strategies to the game of Blackjack.  Strategies are comprised of a progression of bets made on the blackjack table along with how to play each hand.  Bets are based on the amount of money currently in play and the number of bets previously won on the current game along with whether the bank roll is x dollars above or below its starting amount.    One part of the program will simulate the selected strategy and the other side will simulate game play.  The results will be saved to a database so they can be viewed in reports in Google Sheets.

Bankroll
Keeps track of the players bankroll, the size of each bet according to a strategy.  For example, in Blackjack we always bet $10 then if we win one hand the next bet is $15.  If we win that bet we go back to the $10 bet.  
If we lose a hand we just go back to the $10 bet.
The betting strategy should be able to simulate these bets and keep track of the win loss percentage and to be applied to different games.  


Blackjack is the simpler one because it will just be an array of 52 cards X the number of decks.  Simulate shuffling the cards and then dealing the hands.  Would be nice to run multiple strategies simultaneously so it should be a multi-player game.  That way different players can be running different strategies against the same deck.

In Blackjack we must specify the base bet, double down and split.


Bankroll object
Will maintain the bankroll balance after each round of betting and play
Will indicate the number of rounds of betting completed by the simulator - can be set to run for 100, 200 or 300 rounds 

Cards object
This will contain the decks of cards that are being played with.  These decks will be shuffled and then stored in the cards object.  The cards object will be used to draw cards from for each hand.  When the number of cards remaining gets below 20 it will force a new shuffle and start over.

Strategy object
Can be read like a flowchart 
Should indicate what to do after each round of play to determine what to do for the next round of play.  When the strategy comes to an end it will just go back to the first step of the strategy.  For instance, in black jack the first bet is $10.  If the first bet loses then go back to the beginning of the strategy.  If the bet is a win then the next bet is $15.  If that bets wins or loses - go back to the first step.

Bet Object 
There will be an array of bet objects.  They can be assigned as a Pass Line bet, Don’t pass bet, Odds bet, Lay bet, Field bet, Come bet, Don’t come bet, Place Bet, Come bet odds, Don’t come bet lay 
Once a bet is marked as a lose it will no longer be in play 
The bet object will indicate the amount, the type of bet and whether it is a win/lose or new

Shuffling Object
Will need to randomize the position of the cards in the deck.  Should be able to do that X number of times to simulate multiple shuffles.  Should also be able to handle 1-7 decks in each shuffle.  

Game Play Object
This module will simulate the game play of blackjack using the standard strategy
In the beginning there will just be one player hand vs one dealer hand
If we get fancy and upgrade to multiple hands that will come in a later release

Strategy object 
Should be set up with a series of steps that can be read like a flow chart.  
The first part of each step will be the bets - for blackjack this will be a dollar amount to bet on the hand
The bet array will be set up initially with the first bet in the strategy
The game play object will execute game play and return the bet(s)
There may be more than one bet returned as there could be splits and double downs
The result will be whether the total amount of the bets = the original amount, is less than the original amount or is more than the original amount
After determining the result 
  The second part of the step in the strategy will indicate what is the next step 
  The program will go to the next step indicated
  For blackjack - a loss will likely send us back to step 1 of the strategy
          - a push or break even will usually repeat the current step 
          - a win will usually go to the next step unless it is the last step in the strategy in which case it will go back to 1

The basic strategy for blackjack should be programmed into the game play object and executed without being affected by the strategy.  The blackjack strategies will only contain decisions on whether the last hand was a win or loss and the number and size of bets being played.

We should also have the ability to run multiple strategies side-by-side on the same hands to compare outcomes.
So we can run one strategy that just bets $10 every time, one that best $15 every time and one that alternates and see how each one fares on 100 hands.

How to program the strategy:
  read JSON file 
  find the step corresponding to the step indicated by the stepCtr
  set up the bet according to that step

  call the gamePlay object

  loop through the bets array - calculate the total value of the bets 
